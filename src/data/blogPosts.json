[
  {
    "id": "Blog-5",
    "title": "My GCP DevOps Certification Journey: Lessons From a 'Failed' Attempt",
    "snippet": "Sometimes, the journey of learning and the lessons from 'failure' are more valuable than the certificate itself. Here's my story of tackling the GCP DevOps certification.",
    "longExcerpt": "My startup experience ignited a deep interest in cloud technologies, leading me to pursue the GCP DevOps certification. This post shares my learning process, the challenges with scenario-based questions, the exam outcome, and the invaluable lessons gained despite not passing.",
    "date": "2025-05-23",
    "tags": ["Certification", "GCP", "DevOps", "Learning", "Personal", "Exam Experience"],
    "imageUrls": [
      "/images/blogs/blog-5/image1.jpeg"
    ],
    "estimatedReadingTime": "Est. 5 min read",
    "content": "## The Spark: Why GCP DevOps?\\n\\nMy startup journey had really opened my eyes to the power and necessity of cloud infrastructure. As I delved deeper, I became fascinated with the world of DevOps and how cloud platforms like Google Cloud Platform (GCP) could streamline development and operations. To solidify my understanding and, frankly, to give my career a potential boost, I decided that a certification would be a great goal. It would serve as tangible proof of my growing knowledge in this domain.\\n\\n## The Learning Path: Qwiklabs and Core Concepts\\n\\nI chose the GCP Professional Cloud DevOps Engineer certification as my target. My primary learning resource was Google's own Qwiklabs portal. It's a fantastic platform with structured learning paths for various certifications, offering video explanations and, crucially, hands-on labs with pre-configured GCP accounts. This practical experience was invaluable.\\n\\nI started by getting a broad overview of the different cloud platform services GCP offers. Then, I dove into the core principles of DevOps and Google's Site Reliability Engineering (SRE) practices. Concepts like Service Level Objectives (SLOs), Service Level Indicators (SLIs), and error budgets started to make sense, and I could see how they would make life easier for a DevOps engineer. The curriculum also covered CI/CD pipelines – learning how to create them, the different approaches, and when to use which – and essential security practices for protecting web applications.\\n\\n## The Reality Check: The Mock Test\\n\\nAfter weeks of study and hands-on labs, I felt reasonably prepared. I'd learned about the services and how to use them. So, I decided to take the official GCP practice exam available on their website. The result? I failed. Terribly.\\n\\nIt was a humbling experience. I quickly realized that all my learning had focused on *what* each GCP service did and *how* to use it through the console or gcloud commands. The mock test, however, was packed with scenario-based questions. They weren't just testing if I knew a service existed; they were testing if I understood the deep fundamentals and could determine *why* one approach or service would be better than another in a complex, real-world situation. It was about problem-solving and architectural thinking, not just recall.\\n\\n## The Attempt and the Outcome\\n\\nThis realization was a bit of a setback. I tried searching online for more scenario-based practice questions or resources that focused on that style of thinking for the GCP DevOps exam, but I couldn't find much that specifically hit the mark. Despite this, and perhaps a bit stubbornly, I decided to go ahead and attempt the actual certification exam. As you might guess, I didn't pass.\\n\\n## The Real Victory: Invaluable Learnings\\n\\nAlthough I didn't get the certificate, the entire experience was far from a waste. In fact, the learnings from this 'failure' have been incredibly valuable. It taught me a crucial lesson about the difference between surface-level knowledge (knowing what a tool does) and deep, fundamental understanding (knowing why and when to use it, and how it fits into a larger system). It highlighted the importance of critical thinking and scenario-based problem-solving, especially in the DevOps field.\\n\\nThis journey reinforced that true learning isn't just about passing an exam but about genuinely grasping concepts and being able to apply them. While the certificate would have been nice, the deeper insights I gained into cloud architecture and DevOps principles are something I carry with me and apply in my work, and that, I believe, is the real win."
  },
  {
    "id": "Blog-4",
    "title": "My TCS Journey: NQT, Interview Ups & Downs, and the Digital Offer",
    "snippet": "From the rigors of the TCS National Qualifier Test to the anxieties of the interview and the eventual joy of receiving an offer – here's my story of joining TCS.",
    "longExcerpt": "This post details my experience navigating the TCS NQT, from preparation and successfully tackling both aptitude and coding rounds, to being shortlisted for the Prime role. It covers the interview experience, the emotional rollercoaster, and finally landing a Digital role, along with the subsequent onboarding process.",
    "date": "2025-05-23",
    "tags": ["Career", "TCS", "NQT", "Interview Experience", "Job Offer", "Personal"],
    "imageUrls": [
      "/images/blogs/blog-4/image1.png",
	  "/images/blogs/blog-4/image2.jpg"
    ],
    "estimatedReadingTime": "Est. 6 min read",
    "content": "## The TCS NQT: A National Arena\\n\\nTCS conducts a national-level test every year, the National Qualifier Test (NQT), attracting thousands of students aspiring to kickstart their careers with them. The company offers three main roles for freshers: Ninja, with the lowest salary package; Digital; and Prime, which boasts the highest. The NQT itself consists of both aptitude and coding questions. Your performance in this test plays a significant role in determining your tentative role. These tests are held at TCS iON centers on multiple dates, making it a widespread and competitive event.\\n\\n## Tackling the NQT\\n\\nMy NQT exam experience was, overall, quite positive. I had put in some preparation for the aptitude section, which I knew could be tricky. As for the coding round, my daily LeetCode practice paid off immensely, meaning I didn't need extensive last-minute cramming. The coding round presented two questions, and I'm happy to say I was able to solve both of them successfully. There's a certain thrill in seeing your code pass all test cases under exam conditions!\\n\\n## The Interview Call and Preparation\\n\\nA couple of weeks after the NQT, the much-awaited email arrived: my profile had been selected for the Prime role, and an interview was scheduled! It was an exciting moment, and a few of my friends also received their interview calls for the same day. My interview was set for June 14th, 2024. The day before, I made sure to create a new resume, meticulously updating it with my latest skill set and the projects I had developed during college. With resume in hand, I headed for the interview the next day.\\n\\n## Interview Day: Hopes and Hurdles\\n\\nThe interview venue was bustling with candidates from all over the city, vying for various roles. There was a palpable mix of nervousness and anticipation in the air. I had to wait for some time before my turn came. The interview itself started off well. The interviewers focused mainly on what I had written in my resume – my skills, and particularly the projects I’d developed in college. I felt confident discussing these, as they were areas I was passionate and knowledgeable about.\\n\\nHowever, as the interview progressed, it took a bit of a downward turn. I found myself struggling with some fundamental questions related to my own projects. It was a tough moment, realizing I couldn't articulate certain core concepts as clearly as I should have. I did feel a little sad and disappointed with myself afterward, replaying those moments in my head.\\n\\n## The Offer and the Wait\\n\\nDespite the hiccup in the interview, I tried to remain optimistic. After what felt like an eternity, but was actually about a month, I received my offer letter on July 13th, 2024! I was selected for the Digital role. While it wasn't the Prime role I had initially hoped for after the NQT, landing the Digital role was still a significant achievement, and definitely 'something better than nothing.' I gladly accepted the offer.\\n\\nLittle did I know that another period of waiting was in store. TCS, like many large organizations, has its own pace for onboarding candidates. Even with an accepted offer, it took a few more months before I received confirmation of my joining date. Finally, after about 3-4 months of patience, the email arrived: my joining was scheduled for November 14th, 2024. And so, I finally joined TCS as a Systems Engineer, ready to embark on a new chapter of my professional journey."
  },
  {
    "id": "Blog-3",
    "title": "My Startup Adventure: Building 'The Bommber' and Lessons Learned",
    "snippet": "Diving into the world of startups with 'The Bommber,' an interactive email marketing platform. A journey of technical challenges, team building, and immense learning.",
    "longExcerpt": "Recounting the journey of creating 'The Bommber,' from the initial idea of in-mail shopping functionalities to learning AMP for email, developing the frontend (and its evolution to React), building a scalable backend, and navigating the complexities of cloud deployment and client interactions.",
    "date": "2025-05-23",
    "tags": ["Startup", "Entrepreneurship", "Email Marketing", "AMP Framework", "React", "Backend", "Cloud", "Learning"],
    "imageUrls": [
      "/images/blogs/blog-3/image1.png",
	  "/images/blogs/blog-3/image2.png",
	  "/images/blogs/blog-3/image3.png"
    ],
    "estimatedReadingTime": "Est. 7 min read",
    "content": "## The Spark: Introducing 'The Bommber'\\n\\nEvery so often, an idea takes root, an ambition to build something unique. For me, that was 'The Bommber' – an interactive email marketing platform designed to provide innovative solutions for D2C brands. The core vision was to revolutionize email engagement by allowing recipients to make purchases directly within their emails, without ever leaving their inbox. Beyond that, we aimed to incorporate in-mail survey and quiz functionalities, making emails more dynamic and interactive than ever before.\\n\\n## Diving Deep: AMP and Early Development\\n\\nThe journey began with a steep learning curve. To bring our interactive email vision to life, I first delved into the AMP (Accelerated Mobile Pages) framework for email. This technology was key to enabling dynamic and interactive content within the constraints of email clients. Once I had a grasp on AMP, the next big hurdle was the website. My frontend skills weren't my strongest suit, nor do I consider myself particularly creative in UI design. Nevertheless, I developed a basic frontend, pouring most of my energy into the backend logic and the intricacies of interactive email rendering. The focus was clear: get the core functionality working.\\n\\n## Evolution: From Basic Site to Professional Platform\\n\\nAs we progressed, a crucial realization dawned upon us: a merely 'working' website wasn't enough. To attract investors and potential clients, we needed a platform that exuded professionalism and offered a seamless user experience. This insight led to a pivotal decision: to expand the team. We hired a talented design intern and a couple of enthusiastic development interns.\\n\\nTheir fresh perspectives and skills were invaluable. On their suggestion, we made the leap from our basic HTML/CSS website to a more robust and modern solution using the React framework. At that point, React was new territory for me. But, driven by the project's needs, I knew I could learn it quickly. True to that, within just a few days, I was comfortable enough with React to contribute effectively. Together, we deployed a polished website that we were proud to showcase.\\n\\n## Scaling Up: Backend, Cloud, and Client Interaction\\n\\nThis period of UI enhancement coincided with intensive backend development. I took on the challenge of designing the database schema, crafting APIs, and navigating the complexities of cloud deployment. This phase was a whirlwind of learning – from choosing the right cloud provider (we switched between multiple!) to optimizing services for cost-efficiency. Building a scalable backend system that could handle the demands of an interactive email platform was a significant undertaking.\\n\\nMore than just the technical aspects, this startup journey was a masterclass in other crucial skills. I learned how to make a backend system that could grow with user demand, how to select and manage cloud services effectively, and, importantly, how to interact with clients and potential investors, articulating the vision and value of 'The Bommber'. It was a period of immense growth, both technically and professionally, packed with lessons that continue to shape my approach to software engineering."
  },
  {
    "id": "Blog-2",
    "title": "My Coding Odyssey: Part 2 - College, Creativity, and the Cloud",
    "snippet": "Navigating engineering college amidst a pandemic, discovering the joy of project development, and venturing into Android apps, AI, and cloud technologies...",
    "longExcerpt": "This second part of my journey details my time at Rajiv Gandhi Institute of Technology. It covers the challenges of online learning, the excitement of core computer science subjects, collaborative projects like a Grocery Billing System, and my foray into Android development, Machine Learning with LinkedIn Learning, LeetCode, AWS, PowerBI, and Docker during breaks and final year projects.",
    "date": "2024-01-16",
    "tags": ["Personal", "Journey", "College", "Projects", "Android", "AI", "Cloud"],
    "imageUrls": [
      "/images/blogs/blog-2/image1.jpg",
	  "/images/blogs/blog-2/image2.png"
    ],
    "estimatedReadingTime": "Est. 9 min read",
    "content": "## Embracing the Unplanned Journey\\n\\nThe path led me to Rajiv Gandhi Institute of Technology for Computer Engineering. It wasn't my first choice, but it marked a new beginning. The initial phase was a whirlwind. Delayed exams and admissions meant the first three semesters were a race to catch up. Online lectures and exams became the new normal, an intense atmosphere indeed. Freshman year was a blur of physics, chemistry, maths, and electrical engineering basics. The only familiar comfort was C Programming, a language I already felt at home with. Despite the academic chaos, I clung to the skills I’d honed during lockdown; every line of code then was a step toward mastery now.\\n\\nAs the second year dawned, we dove into the core of computer science: Data Structures, DBMS, Object-Oriented Programming with Java, and Python. To my surprise, my earlier self-study meant these subjects felt more like a review than a new challenge. While the demanding schedule made acquiring entirely new skills tough, I poured my energy into developing projects. The shift to departmental subjects also meant the end of purely offline lectures, and finally, meeting friends in person whom I’d only known through WhatsApp chats added a much-needed personal dimension to college life. My team and I managed to build a Grocery Shop Billing System and an Airline Ticket Reservation System, drawing heavily on my Java and SQL knowledge. Two years of engineering had flown by, a journey not as planned, but a unique tapestry of unexpected challenges and triumphs nonetheless.\\n\\n##  Unleashing Creativity in a Month-Long Break\\n\\nAfter two intense years, a month-long vacation felt like a breath of fresh air. With a decent grasp of several languages and data structures, I was itching for something new. Android Application Development caught my eye. I started with Google's free resources, which were good, but CodeWithHarry's YouTube playlist on Android development truly unlocked it for me. The course culminated in building a music player app, and with it came a surge of confidence – I could build my own Android apps!\\n\\nWith time still on my hands, I embarked on a personal project: a School App. It was the perfect playground to practice Android development and refresh my Java and database concepts. The thrill of transforming an idea into a functional app was incredibly rewarding. As this project neared completion, our university mandated an academic project. After discussions with our guide, we settled on a Timetable Generator. It sounded straightforward, but oh, how wrong we were! What we initially brushed off as a routine task quickly revealed its complexity. The more we researched, the more we realized that timetable generation is an NP-Hard problem. Undeterred, we dove into AI and discovered the Genetic Algorithm. The project transformed from a simple task into an exploration of AI, blending our coding skills with an algorithm that mimicked natural selection. It was a profound lesson in embracing complexity and finding innovative solutions.\\n\\n## Unleashing the Power of Learning\\n\\nAnother month-long break, another learning adventure! This time, Machine Learning was the target. LinkedIn, with its six months of free premium access for students, became an invaluable resource. The premium membership unlocked a treasure trove of courses in AI and ML. As college resumed, our ambitious timetable generator project continued. However, with on-campus recruitment looming next semester, I knew I had to sharpen my problem-solving skills. Enter LeetCode. I committed to solving at least one problem daily. It wasn't always easy; some problems felt like climbing a mountain. Aryan Mittal's YouTube channel often provided the solutions and clarity I needed for those tricky daily puzzles.\\n\\nAcademically, the semester introduced cloud computing, with a focus on AWS. We instantiated EC2 instances and deployed projects using Elastic Beanstalk – a practical introduction to the cloud. The third year ended, and another break began. I dived into Udemy for PowerBI, then Freecodecamp’s YouTube channel for an incredible Docker course. My final year saw the start of my Major Project, 'SimplifyMe', and further explorations into blockchain and machine learning. I also added JavaScript and NodeJS to my expanding skillset.\\n\\nAnd now, here I am, on the verge of a new chapter, eager for opportunities as a Software Engineer. This journey, a rollercoaster of learning, challenges, and growth, has equipped me with a unique perspective and a relentless drive. If you're looking for someone with my skills and passion, I’m ready to connect and create something extraordinary."
  },
  {
    "id": "Blog-1",
    "title": "My Coding Odyssey: Part 1 - Sparks, Doubts, and Unexpected Turns",
    "snippet": "From post-exam uncertainties to early coding victories and the humbling challenges of C, join me on the initial chapters of my journey into the world of software engineering...",
    "longExcerpt": "This post recounts the very beginning of my coding adventure, starting April 2018. It covers the initial exploration of HTML, CSS, and JavaScript, the thrill of early learning, the daunting encounter with C's pointers, and the unexpected twists brought by the pandemic which led to an intensive period of self-learning in DSA, Python, and Java.",
    "date": "2024-01-16",
    "tags": ["Personal", "Journey", "Learning", "Coding"],
    "imageUrls": [
      "/images/blogs/blog-1/image1.png",
	  "/images/blogs/blog-1/image2.png",
	  "/images/blogs/blog-1/image3.png",
	  "/images/blogs/blog-1/image4.png"
    ],
    "estimatedReadingTime": "Est. 8 min read",
    "content": "## Doubts and Debugging: The Reality Check\\n\\nApril 2018. That’s when it all began, or rather, when a new kind of 'it' began. My SSC exams were over, and a vast expanse of vacation time stretched before me – a canvas of possibilities. But amidst that freedom, a nagging uncertainty about my career path lingered. I’ve always believed in self-improvement, so I decided to dip my toes into the world of coding. Why not, right? Free resources were abundant online, and 'freecodecamp' became my first digital dojo.\\n\\nHTML felt like a gentle introduction, and CSS followed suit. It’s funny how quickly those initial wins came. Within 15-20 days, I was navigating these languages with a confidence that surprised even me. That early thrill sparked a thought – maybe computer engineering was my calling. Then came a JavaScript course. The instructor made the basics seem almost too simple, and for a moment, I thought, 'This is it! I’ve found my thing.'\\n\\nBut the coding world has its gatekeepers, and for me, one of them was the C programming language. Recommendations led me to it, and initially, it was approachable. Then came arrays, pointers, dynamic memory allocation… The smooth sailing turned into choppy waters. Grasping these concepts felt like trying to catch smoke. Doubt, that unwelcome guest, started to creep in. Was I cut out for this? Yet, through that haze of confusion and frustration, a deeper truth began to emerge. The journey wasn't just about the easy victories; it was about weathering the storms. That initial turbulence, as it turned out, was just laying the groundwork for a more profound connection with coding. The odyssey had truly begun.\\n\\n## Embracing the College Coding Adventure\\n\\nThe vacation sun eventually set, and Mithibai College became the next arena for my computer science exploration. Opting for it as my vocational course, C++ was on the curriculum. Having already wrestled with C, C++ felt familiar, like meeting an old friend with a few new quirks. Pointers, my old nemeses, were still there, challenging my understanding. But this time, something clicked. The fog around arrays and dynamic memory allocation that had plagued me during my C studies started to lift. Those early struggles were transforming into stepping stones.\\n\\nPractical sessions were where the magic truly happened. Crafting star patterns, weaving intricate diamonds on the screen – these weren't just assignments; they were the exercises that sharpened my understanding of loops and conditional logic. My programming logic, once a hesitant flicker, ignited. The second year deepened this dive into C++, introducing object-oriented programming and file I/O. Then came microprocessors, specifically the 8085. Assembly language felt like deciphering an ancient script at first, but with perseverance and practice, it became a language I could speak.\\n\\nThose two years at Mithibai were transformative. Every challenge, every line of code, every small triumph sculpted my understanding and refined my logic. Little did I know, as I walked those college corridors, that each step was leading me closer to even more thrilling chapters in this coding odyssey.\\n\\n## Embracing the Unexpected Turns\\n\\nAs 2020 dawned and my time at Mithibai concluded, I was gearing up for HSC exams and MHT-CET, the gateway to engineering. Then, the world turned upside down. The COVID-19 pandemic threw everything into disarray. Exams were postponed, and lockdown boredom set in. With an uncertain future for exams, I decided to dive back into programming, a constant in a world of variables.\\n\\nThe internet became my roadmap: Learn a Language, Master Data Structures and Algorithms, Build Projects, Create a Resume, Apply for Jobs. With a C++ foundation, I tackled DSA. Finding good resources was a struggle until I stumbled upon Jenny's CS/IT YouTube channel. Her DSA playlist was a game-changer; complex data structures and algorithms started making sense.\\n\\nMy first projects were simple console applications, but each one was a step forward. With exam dates still up in the air, I decided to broaden my linguistic horizons. Python, with its rising demand, was next. Telusko's YouTube channel became my guide, and his Python playlist was phenomenal. The dynamically typed nature and pointer-less syntax were a refreshing change from C++. In about 10-12 days, I’d devoured the entire playlist. Java followed, and thanks to my C/C++ background, it felt surprisingly intuitive. Within a month, I had added two new languages to my toolkit.\\n\\nExams were finally scheduled for October 2020. Preparations were intense, and though they didn't go as perfectly as I'd hoped, the relief of completion was immense. Again, free time beckoned. My curiosity led me to databases and SQL. Freecodecamp, yet again, provided a fantastic 4-hour video that demystified SQL. This unexpected journey, full of twists and turns, was shaping into a narrative of resilience, adaptability, and an unyielding thirst for knowledge. The coding odyssey continued, richer and more complex than I could have ever imagined."
  }
]

    